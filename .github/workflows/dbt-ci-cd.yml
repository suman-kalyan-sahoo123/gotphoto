name: dbt CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - 'gotphoto_dbt_project/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'gotphoto_dbt_project/**'

env:
  DBT_PROFILES_DIR: ./gotphoto_dbt_project/profiles
  DBT_PROJECT_DIR: ./gotphoto_dbt_project

jobs:
  pr-validation:
    name: PR Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dbt-snowflake
        run: |
          python -m pip install --upgrade pip
          pip install dbt-snowflake
          
      - name: Create dbt profiles
        run: |
          mkdir -p gotphoto_dbt_project/profiles
          cat > gotphoto_dbt_project/profiles/profiles.yml << EOF
          gotphoto_dbt_project:
            target: pr_${{ github.event.number }}
            outputs:
              pr_${{ github.event.number }}:
                type: snowflake
                account: ${{ secrets.SNOWFLAKE_ACCOUNT }}
                user: ${{ secrets.SNOWFLAKE_USER }}
                password: ${{ secrets.SNOWFLAKE_PASSWORD }}
                role: ${{ secrets.SNOWFLAKE_ROLE }}
                database: GOTPHOTO_ANALYTICS_DB_PR_${{ github.event.number }}
                warehouse: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
                schema: dbt_pr_${{ github.event.number }}
                threads: 2
          EOF
          
      - name: Verify source database exists
        run: |
          python -c "
          import snowflake.connector
          try:
              print('Connecting to Snowflake...')
              conn = snowflake.connector.connect(
                  account='${{ secrets.SNOWFLAKE_ACCOUNT }}',
                  user='${{ secrets.SNOWFLAKE_USER }}',
                  password='${{ secrets.SNOWFLAKE_PASSWORD }}',
                  role='${{ secrets.SNOWFLAKE_ROLE }}'
              )
              print('Connected successfully!')
              
              cursor = conn.cursor()
              print('Checking if GOTPHOTO_ANALYTICS_DB exists...')
              cursor.execute('SHOW DATABASES LIKE \'GOTPHOTO_ANALYTICS_DB\'')
              result = cursor.fetchone()
              if result:
                  print('✅ Source database found!')
              else:
                  print('❌ Source database GOTPHOTO_ANALYTICS_DB not found!')
                  exit(1)
              
              cursor.close()
              conn.close()
              print('Connection closed.')
          except Exception as e:
              print(f'Error: {e}')
              exit(1)
          "
          
      - name: Clone Snowflake database
        run: |
          python -c "
          import snowflake.connector
          try:
              print('Connecting to Snowflake...')
              conn = snowflake.connector.connect(
                  account='${{ secrets.SNOWFLAKE_ACCOUNT }}',
                  user='${{ secrets.SNOWFLAKE_USER }}',
                  password='${{ secrets.SNOWFLAKE_PASSWORD }}',
                  role='${{ secrets.SNOWFLAKE_ROLE }}'
              )
              print('Connected successfully!')
              
              cursor = conn.cursor()
              print('Creating database clone...')
              cursor.execute('CREATE DATABASE GOTPHOTO_ANALYTICS_DB_PR_${{ github.event.number }} CLONE GOTPHOTO_ANALYTICS_DB')
              print('✅ Database cloned successfully!')
              
              cursor.close()
              conn.close()
              print('Connection closed.')
          except Exception as e:
              print(f'❌ Error: {e}')
              exit(1)
          "
          
      - name: dbt debug
        run: |
          cd gotphoto_dbt_project
          dbt debug --project-dir . --profiles-dir profiles
          
      - name: dbt deps
        run: |
          cd gotphoto_dbt_project
          dbt deps --project-dir . --profiles-dir profiles
          
      - name: dbt compile
        run: |
          cd gotphoto_dbt_project
          dbt compile --project-dir . --profiles-dir profiles
          
      - name: dbt run (changed models only)
        run: |
          cd gotphoto_dbt_project
          # Get changed files and run only those models
          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep "models/" || echo "")
          if [ -n "$CHANGED_FILES" ]; then
            echo "Changed model files: $CHANGED_FILES"
            dbt run --select $(echo $CHANGED_FILES | sed 's/models\///g' | sed 's/\.sql//g' | tr '\n' ' ') --project-dir . --profiles-dir profiles
          else
            echo "No model files changed, running all models"
            dbt run --project-dir . --profiles-dir profiles
          fi
          
      - name: Cleanup cloned database
        if: always()
        run: |
          python -c "
          import snowflake.connector
          try:
              print('Connecting to Snowflake for cleanup...')
              conn = snowflake.connector.connect(
                  account='${{ secrets.SNOWFLAKE_ACCOUNT }}',
                  user='${{ secrets.SNOWFLAKE_USER }}',
                  password='${{ secrets.SNOWFLAKE_PASSWORD }}',
                  role='${{ secrets.SNOWFLAKE_ROLE }}'
              )
              print('Connected successfully!')
              
              cursor = conn.cursor()
              print('Dropping cloned database...')
              cursor.execute('DROP DATABASE IF EXISTS GOTPHOTO_ANALYTICS_DB_PR_${{ github.event.number }}')
              print('Database dropped successfully!')
              
              cursor.close()
              conn.close()
              print('Connection closed.')
          except Exception as e:
              print(f'Cleanup Error: {e}')
              exit(1)
          "

  production-deployment:
    name: Production Deployment
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dbt-snowflake
        run: |
          python -m pip install --upgrade pip
          pip install dbt-snowflake
          
      - name: Create dbt profiles
        run: |
          mkdir -p gotphoto_dbt_project/profiles
          cat > gotphoto_dbt_project/profiles/profiles.yml << EOF
          gotphoto_dbt_project:
            target: prod
            outputs:
              prod:
                type: snowflake
                account: ${{ secrets.SNOWFLAKE_ACCOUNT }}
                user: ${{ secrets.SNOWFLAKE_USER }}
                password: ${{ secrets.SNOWFLAKE_PASSWORD }}
                role: ${{ secrets.SNOWFLAKE_ROLE }}
                database: ${{ secrets.SNOWFLAKE_DATABASE }}
                warehouse: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
                schema: prod
                threads: 4
          EOF
          
      - name: dbt debug
        run: |
          cd gotphoto_dbt_project
          dbt debug --project-dir . --profiles-dir profiles
          
      - name: dbt deps
        run: |
          cd gotphoto_dbt_project
          dbt deps --project-dir . --profiles-dir profiles
          
      - name: dbt compile
        run: |
          cd gotphoto_dbt_project
          dbt compile --project-dir . --profiles-dir profiles
          
      - name: dbt run (all models with full-refresh)
        run: |
          cd gotphoto_dbt_project
          dbt run --full-refresh --project-dir . --profiles-dir profiles 