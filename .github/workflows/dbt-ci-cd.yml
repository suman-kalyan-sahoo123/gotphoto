name: dbt CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - 'gotphoto_dbt_project/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'gotphoto_dbt_project/**'

env:
  DBT_PROFILES_DIR: ./gotphoto_dbt_project/profiles
  DBT_PROJECT_DIR: ./gotphoto_dbt_project

jobs:
  pr-validation:
    name: PR Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dbt-snowflake
        run: |
          python -m pip install --upgrade pip
          pip install dbt-snowflake
          
      - name: Create dbt profiles
        run: |
          mkdir -p $DBT_PROFILES_DIR
          cat > $DBT_PROFILES_DIR/profiles.yml << EOF
          gotphoto_dbt_project:
            target: pr_${{ github.event.number }}
            outputs:
              pr_${{ github.event.number }}:
                type: snowflake
                account: ${{ secrets.SNOWFLAKE_ACCOUNT }}
                user: ${{ secrets.SNOWFLAKE_USER }}
                password: ${{ secrets.SNOWFLAKE_PASSWORD }}
                role: ${{ secrets.SNOWFLAKE_ROLE }}
                database: GOTPHOTO_ANALYTICS_DB_PR_${{ github.event.number }}
                warehouse: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
                schema: dbt_pr_${{ github.event.number }}
                threads: 2
          EOF
          
      - name: Clone Snowflake database
        run: |
          python -c "
          import snowflake.connector
          conn = snowflake.connector.connect(
              account='${{ secrets.SNOWFLAKE_ACCOUNT }}',
              user='${{ secrets.SNOWFLAKE_USER }}',
              password='${{ secrets.SNOWFLAKE_PASSWORD }}',
              role='${{ secrets.SNOWFLAKE_ROLE }}'
          )
          cursor = conn.cursor()
          cursor.execute('CREATE DATABASE GOTPHOTO_ANALYTICS_DB_PR_${{ github.event.number }} CLONE GOTPHOTO_ANALYTICS_DB')
          cursor.close()
          conn.close()
          "
          
      - name: dbt debug
        run: |
          cd $DBT_PROJECT_DIR
          dbt debug
          
      - name: dbt deps
        run: |
          cd $DBT_PROJECT_DIR
          dbt deps
          
      - name: dbt compile
        run: |
          cd $DBT_PROJECT_DIR
          dbt compile
          
      - name: dbt run (changed models only)
        run: |
          cd $DBT_PROJECT_DIR
          dbt run --select state:modified+ --state-refs main
          
      - name: Cleanup cloned database
        if: always()
        run: |
          python -c "
          import snowflake.connector
          conn = snowflake.connector.connect(
              account='${{ secrets.SNOWFLAKE_ACCOUNT }}',
              user='${{ secrets.SNOWFLAKE_USER }}',
              password='${{ secrets.SNOWFLAKE_PASSWORD }}',
              role='${{ secrets.SNOWFLAKE_ROLE }}'
          )
          cursor = conn.cursor()
          cursor.execute('DROP DATABASE IF EXISTS GOTPHOTO_ANALYTICS_DB_PR_${{ github.event.number }}')
          cursor.close()
          conn.close()
          "

  production-deployment:
    name: Production Deployment
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dbt-snowflake
        run: |
          python -m pip install --upgrade pip
          pip install dbt-snowflake
          
      - name: Create dbt profiles
        run: |
          mkdir -p $DBT_PROFILES_DIR
          cat > $DBT_PROFILES_DIR/profiles.yml << EOF
          gotphoto_dbt_project:
            target: prod
            outputs:
              prod:
                type: snowflake
                account: ${{ secrets.SNOWFLAKE_ACCOUNT }}
                user: ${{ secrets.SNOWFLAKE_USER }}
                password: ${{ secrets.SNOWFLAKE_PASSWORD }}
                role: ${{ secrets.SNOWFLAKE_ROLE }}
                database: ${{ secrets.SNOWFLAKE_DATABASE }}
                warehouse: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
                schema: prod
                threads: 4
          EOF
          
      - name: dbt debug
        run: |
          cd $DBT_PROJECT_DIR
          dbt debug
          
      - name: dbt deps
        run: |
          cd $DBT_PROJECT_DIR
          dbt deps
          
      - name: dbt compile
        run: |
          cd $DBT_PROJECT_DIR
          dbt compile
          
      - name: dbt run (changed models with full-refresh)
        run: |
          cd $DBT_PROJECT_DIR
          dbt run --select state:modified+ --state-refs main --full-refresh 